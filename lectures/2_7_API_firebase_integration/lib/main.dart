import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:http/http.dart' as http;

import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'services/firebase_options.dart';

import 'services/LaunchLibraryApi.dart';
import 'services/firebaseService.dart';
import 'repositories/launchRepository.dart';
import 'viewModels/launchListVM.dart';
import 'views/launchListView.dart';


 // generated by FlutterFire CLI

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );

  await FirebaseAuth.instance.signInAnonymously();
  runApp(const LaunchPadApp());
}

class LaunchPadApp extends StatelessWidget {
  const LaunchPadApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MultiProvider(
      providers: [
        // 1) Low-level deps FIRST
        Provider<http.Client>(create: (_) => http.Client()),

        // 2) Services wired with ProxyProvider to avoid context.read in create
        ProxyProvider<http.Client, LaunchLibraryApi>(
          update: (_, client, __) => LaunchLibraryApi(client),
        ),

        Provider<FirebaseService>(create: (_) => FirebaseService()),

        // 3) Repository depends on API + Firebase
        ProxyProvider2<LaunchLibraryApi, FirebaseService, LaunchRepository>(
          update: (_, api, fb, __) => LaunchRepository(api, fb),
        ),

        // 4) ViewModels depend on the repository
        ChangeNotifierProvider<LaunchListVM>(
          create: (ctx) => LaunchListVM(ctx.read<LaunchRepository>()),
        ),
      ],
      child: MaterialApp(
        title: 'LaunchPad (LL2 + Firebase)',
        theme: ThemeData(useMaterial3: true, colorSchemeSeed: Colors.indigo),
        home: const LaunchListView(),
      ),
    );
  }
}